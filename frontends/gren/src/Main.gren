module Main exposing ( Model, Msg )

import Browser
import Browser.Navigation as Navigation
import Html
import Lib.Return as Return exposing ( Return )
import Url exposing ( Url )


type Msg
    = UrlRequested Browser.UrlRequest
    | UrlChanged Url


type alias Model =
    { key : Navigation.Key }


main : Program {} Model Msg
main =
    Browser.application
        { init = init
        , subscriptions = subscriptions
        , update = update
        , view = view
        , onUrlRequest = UrlRequested
        , onUrlChange = UrlChanged
        }


init : {} -> Url -> Navigation.Key -> Return Msg Model
init _flags _url key =
    Return.model { key = key }


subscriptions : Model -> Sub Msg
subscriptions _model =
    Sub.none


update : Msg -> Model -> Return Msg Model
update msg model =
    case msg of
        UrlRequested (Browser.Internal _url) ->
            Return.model model

        UrlRequested (Browser.External href) ->
            Navigation.load href
                |> Return.command model

        UrlChanged url ->
            Return.model model


view : Model -> Browser.Document Msg
view model =
    { title = "vvv"
    , body = [ Html.text "vvv" ]
    }
